package main

import "fmt"

func main() {

	// 인터페이스
	// 객체의 동작을 표현, 골격
	// 추상화 제공
	// 단순히 동작에 대한 방법만 표시
	// 인터페이스의 메소드를 구현한 타입은 인터페이스로 사용 가능
	// Go 언어를 유연하게 사용 가능
	// 덕타이핑 : Go 언어의 독창적인 특성
	// 인터페이스 -> 자바(전략패턴, 템플릿메소드 패턴, 팩토리메소드패턴, 어탭터 패턴....)
	// 디자인패턴 측면에서 client 입장 -> 메소도의 구체적인 클래스를 몰라도 인터페이스에 정의된 메서드를 사용하는 객체 보장
	// -> 클래스간의 결합도 감소 -> 유지보수성 향상, 개발 추가의 용이성 -> 독립적인 프로그래밍 가능

	// Ex1
	/*
		type 인터페이스명 interface{
			메소드1() 반환 값(타입혇) // 반환 값 있을경우
			메소드2() // 반환 값 없을경우
		}
	*/

	var t test
	// 비어있는 interface인 경우 nil 리턴
	fmt.Println("ex1: ", t)

}

// 비어있는 인터페이스
type test interface {
}
